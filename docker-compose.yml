version: '3.8'

services:
  # Development service
  scholarport-frontend-dev:
    build:
      context: .
      dockerfile: Dockerfile
      target: development
    container_name: scholarport-frontend-dev
    ports:
      - "3000:3000"
    volumes:
      # Mount source code for hot reload
      - ./public:/app/public
      - ./src:/app/src
      - ./config.js:/app/config.js
      # Prevent node_modules from being overwritten
      - /app/node_modules
    environment:
      - NODE_ENV=development
      - PORT=3000
    networks:
      - scholarport-network
    restart: unless-stopped
    profiles:
      - development

  # Production service
  scholarport-frontend-prod:
    build:
      context: .
      dockerfile: Dockerfile
      target: production
    container_name: scholarport-frontend-prod
    ports:
      - "80:80"
      - "443:443"
    volumes:
      # Mount config for dynamic updates
      - ./config.js:/usr/share/nginx/html/config.js:ro
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/default.conf:/etc/nginx/conf.d/default.conf:ro
      # SSL certificates (will be created by certbot)
      - ./ssl:/etc/nginx/ssl:ro
      - certbot-data:/var/www/certbot:ro
    environment:
      - NODE_ENV=production
    networks:
      - scholarport-network
    restart: unless-stopped
    depends_on:
      - certbot
    profiles:
      - production

  # Certbot for SSL certificates
  certbot:
    image: certbot/certbot:latest
    container_name: scholarport-certbot
    volumes:
      - certbot-data:/var/www/certbot
      - ./ssl:/etc/letsencrypt
    command: certonly --webroot --webroot-path=/var/www/certbot --email your-email@example.com --agree-tos --no-eff-email -d your-domain.com -d www.your-domain.com
    profiles:
      - production

networks:
  scholarport-network:
    driver: bridge
    name: scholarport-network

volumes:
  certbot-data:
    driver: local
