# Default server configuration for Scholarport Frontend
# Supports both IP access and subdomain access with SSL

# Rate limiting
limit_req_zone $binary_remote_addr zone=general:10m rate=10r/s;
limit_req_zone $binary_remote_addr zone=api:10m rate=30r/s;

# Upstream backend server (if needed for API proxy)
upstream backend_server {
    server ec2-13-203-155-163.ap-south-1.compute.amazonaws.com:8000;
    keepalive 32;
}

# HTTP Server - Redirect to HTTPS (when SSL is enabled)
server {
    listen 80;
    listen [::]:80;
    server_name _;  # Catch all - works with IP and domain

    # Serve challenge files for Let's Encrypt
    location /.well-known/acme-challenge/ {
        root /var/www/certbot;
        try_files $uri =404;
    }

    # Redirect all other requests to HTTPS (uncomment after SSL setup)
    # location / {
    #     return 301 https://$host$request_uri;
    # }

    # Serve frontend application (comment out after SSL setup)
    location / {
        root /usr/share/nginx/html;
        index index.html;
        try_files $uri $uri/ /index.html;

        # Cache static assets
        location ~* \.(js|css|png|jpg|jpeg|gif|ico|svg|woff|woff2|ttf|eot)$ {
            expires 1y;
            add_header Cache-Control "public, immutable";
        }
    }

    # Health check endpoint
    location /health {
        access_log off;
        return 200 "healthy\n";
        add_header Content-Type text/plain;
    }
}

# HTTPS Server (uncomment after SSL certificate is obtained)
# server {
#     listen 443 ssl http2;
#     listen [::]:443 ssl http2;
#     server_name your-domain.com www.your-domain.com;  # Update with your domain
#
#     # SSL certificates
#     ssl_certificate /etc/nginx/ssl/live/your-domain.com/fullchain.pem;
#     ssl_certificate_key /etc/nginx/ssl/live/your-domain.com/privkey.pem;
#     ssl_trusted_certificate /etc/nginx/ssl/live/your-domain.com/chain.pem;
#
#     # SSL configuration
#     ssl_protocols TLSv1.2 TLSv1.3;
#     ssl_ciphers 'ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384';
#     ssl_prefer_server_ciphers off;
#     ssl_session_cache shared:SSL:10m;
#     ssl_session_timeout 10m;
#     ssl_session_tickets off;
#     ssl_stapling on;
#     ssl_stapling_verify on;
#
#     # Security headers
#     add_header Strict-Transport-Security "max-age=31536000; includeSubDomains" always;
#     add_header X-Frame-Options "SAMEORIGIN" always;
#     add_header X-Content-Type-Options "nosniff" always;
#     add_header X-XSS-Protection "1; mode=block" always;
#
#     # Root directory
#     root /usr/share/nginx/html;
#     index index.html;
#
#     # Rate limiting
#     limit_req zone=general burst=20 nodelay;
#
#     # Main location - Serve frontend
#     location / {
#         try_files $uri $uri/ /public/index.html;
#
#         # Cache static assets
#         location ~* \.(js|css|png|jpg|jpeg|gif|ico|svg|woff|woff2|ttf|eot)$ {
#             expires 1y;
#             add_header Cache-Control "public, immutable";
#         }
#     }
#
#     # Proxy API requests to backend (optional)
#     location /api/ {
#         limit_req zone=api burst=50 nodelay;
#
#         proxy_pass http://backend_server;
#         proxy_http_version 1.1;
#         proxy_set_header Upgrade $http_upgrade;
#         proxy_set_header Connection 'upgrade';
#         proxy_set_header Host $host;
#         proxy_set_header X-Real-IP $remote_addr;
#         proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
#         proxy_set_header X-Forwarded-Proto $scheme;
#         proxy_cache_bypass $http_upgrade;
#         proxy_connect_timeout 60s;
#         proxy_send_timeout 60s;
#         proxy_read_timeout 60s;
#     }
#
#     # WebSocket support (if needed)
#     location /ws/ {
#         proxy_pass http://backend_server;
#         proxy_http_version 1.1;
#         proxy_set_header Upgrade $http_upgrade;
#         proxy_set_header Connection "upgrade";
#         proxy_set_header Host $host;
#         proxy_set_header X-Real-IP $remote_addr;
#         proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
#         proxy_set_header X-Forwarded-Proto $scheme;
#     }
#
#     # Health check endpoint
#     location /health {
#         access_log off;
#         return 200 "healthy\n";
#         add_header Content-Type text/plain;
#     }
#
#     # Deny access to sensitive files
#     location ~ /\. {
#         deny all;
#         access_log off;
#         log_not_found off;
#     }
# }
