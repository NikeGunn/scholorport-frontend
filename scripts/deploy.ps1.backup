# Scholarport Frontend Deployment Script for Windows
# PowerShell version

param(
    [switch]$SkipTests = $false
)

# Configuration
$EC2_HOST = "ec2-43-205-213-103.ap-south-1.compute.amazonaws.com"
$EC2_USER = "ubuntu"
$PEM_FILE = "scholorport-frontend.pem"
$APP_DIR = "/home/ubuntu/scholarport-frontend"

# Functions
function Write-Info {
    param([string]$Message)
    Write-Host "ℹ $Message" -ForegroundColor Blue
}

function Write-Success {
    param([string]$Message)
    Write-Host "✓ $Message" -ForegroundColor Green
}

function Write-ErrorMsg {
    param([string]$Message)
    Write-Host "✗ $Message" -ForegroundColor Red
}

function Write-Warning {
    param([string]$Message)
    Write-Host "⚠ $Message" -ForegroundColor Yellow
}

Write-Host ""
Write-Host "==========================================" -ForegroundColor Cyan
Write-Host "  Scholarport Frontend Deployment" -ForegroundColor Cyan
Write-Host "==========================================" -ForegroundColor Cyan
Write-Host ""

# Check if PEM file exists
if (-not (Test-Path $PEM_FILE)) {
    Write-ErrorMsg "PEM file not found: $PEM_FILE"
    Write-Info "Please place your PEM file in the project root directory"
    exit 1
}
Write-Success "PEM file found"

# Test SSH connection
Write-Info "Testing SSH connection to EC2..."
$testResult = ssh -i $PEM_FILE -o ConnectTimeout=10 -o StrictHostKeyChecking=no "$EC2_USER@$EC2_HOST" "echo 'Connection successful'" 2>&1

if ($LASTEXITCODE -eq 0) {
    Write-Success "SSH connection successful"
} else {
    Write-ErrorMsg "Cannot connect to EC2 instance"
    Write-Info "Please check your PEM file and EC2 instance status"
    exit 1
}

# Create app directory
Write-Info "Creating application directory on EC2..."
ssh -i $PEM_FILE "$EC2_USER@$EC2_HOST" "mkdir -p $APP_DIR"
Write-Success "Application directory created"

# Sync files using scp (since rsync might not be available on Windows)
Write-Info "Syncing files to EC2..."
Write-Warning "This may take a few minutes..."

# Create a temporary list of files to exclude
$excludePatterns = @("node_modules", ".git", "*.pem", ".env.development", "ssl")

# Use scp to copy files
scp -i $PEM_FILE -r -C `
    public config.js package.json README.md Dockerfile docker-compose*.yml nginx scripts .env.production `
    "$EC2_USER@$EC2_HOST`:$APP_DIR/"

Write-Success "Files synced successfully"

# Install dependencies and start application
Write-Info "Installing dependencies and starting application..."

# Create temporary script file for remote execution
$tempScript = @'
#!/bin/bash
cd /home/ubuntu/scholarport-frontend

# Install Docker if needed
if ! command -v docker &> /dev/null; then
    echo "Installing Docker..."
    curl -fsSL https://get.docker.com -o get-docker.sh
    sudo sh get-docker.sh
    sudo usermod -aG docker ubuntu
    echo "Docker installed successfully"
fi

# Install Docker Compose if needed
if ! command -v docker-compose &> /dev/null; then
    echo "Installing Docker Compose..."
    sudo curl -L "https://github.com/docker/compose/releases/latest/download/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
    sudo chmod +x /usr/local/bin/docker-compose
    echo "Docker Compose installed successfully"
fi

# Stop existing containers
echo "Stopping existing containers..."
docker-compose -f docker-compose.prod.yml down 2>/dev/null || true

# Build and start
echo "Building Docker images..."
docker-compose -f docker-compose.prod.yml build --no-cache

echo "Starting containers..."
docker-compose -f docker-compose.prod.yml up -d

echo ""
echo "Running containers:"
docker ps

echo ""
echo "Application logs:"
docker-compose -f docker-compose.prod.yml logs --tail=20
'@

# Save script to temporary file with Unix line endings
$tempFile = [System.IO.Path]::GetTempFileName()
$tempScript -replace "`r`n", "`n" | Out-File -FilePath $tempFile -Encoding ASCII -NoNewline

# Copy script to EC2 and execute
scp -i $PEM_FILE $tempFile "$EC2_USER@$EC2_HOST`:~/deploy-temp.sh"
ssh -i $PEM_FILE "$EC2_USER@$EC2_HOST" "bash ~/deploy-temp.sh && rm ~/deploy-temp.sh"

# Clean up local temp file
Remove-Item $tempFile -ErrorAction SilentlyContinue 

Write-Success "Application deployed successfully"

Write-Host ""
Write-Success "Deployment completed!"
Write-Host ""
Write-Info "Your application is now running at:"
Write-Info "  - http://$EC2_HOST"
Write-Host ""
Write-Warning "Next steps:"
Write-Info "1. Configure your domain DNS to point to the EC2 IP"
Write-Info "2. Run setup-ssl.ps1 to obtain SSL certificate"
Write-Info "3. Update nginx configuration with your domain"
Write-Host ""
